{"version":3,"file":"static/js/660.57af5662.chunk.js","mappings":"wMAOA,MAkEA,EAlEqBA,KAEjB,MAAMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACNF,GAASG,EAAAA,EAAAA,MAAiB,GAC3B,CAACH,IAGJ,MAAMI,GAAkBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMH,kBAC7C,QAAEI,EAAO,OAAEC,EAAM,MAAEC,EAAK,QAAEC,GAAYN,EAiB5C,OACIO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sFAAqFC,SAAA,EAChGF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oBAAmBC,SAAC,kBACjCN,IAAWI,EAAAA,EAAAA,KAACI,EAAAA,EAAM,IAClBN,IAASE,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CAAAH,SAAEJ,KACb,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQS,QAAS,IAAKN,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8BAEtBL,EAAOU,KAAI,CAACC,EAAOC,KACfT,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oCAAmCC,UAC9CC,EAAAA,EAAAA,MAAA,WAASF,UAAU,QAAOC,SAAA,EACtBC,EAAAA,EAAAA,MAAA,WAASF,UAAU,yEAAwEC,SAAA,EACvFF,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAYS,IAAKF,EAAMG,MAAOC,IAAI,cAErDZ,EAAAA,EAAAA,KAAA,QAAAE,SAAOM,EAAMK,SACbb,EAAAA,EAAAA,KAAA,QAAAE,SAAOM,EAAMM,QACbd,EAAAA,EAAAA,KAAA,QAAAE,SAAOM,EAAMO,QACbf,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mCAAkCC,UAC9CF,EAAAA,EAAAA,KAAA,OAAKgB,KAAK,OAAOC,OAAO,KAAK,kBAAgB,qBAAqBC,OAAO,eAAe,iBAAe,QAAQ,kBAAgB,QAAQ,eAAa,MAAMC,QAAQ,YAAYC,MAAM,KAAIlB,UAACF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,yBAIzMrB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gEAA+DC,UACxEF,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CAACC,GAAIf,EAAMgB,KAAKtB,SAChBM,EAAMA,cAhBiCC,SA0BlE,C,wDCnEd,MAQA,EARgBgB,IAAiB,IAAhB,SAACC,GAASD,EACzB,OACEzB,EAAAA,EAAAA,KAAA,OAAAE,SACGwB,GACG,C,8EC4CV,MAAMC,EAAQC,aAAaC,QAAQ,SAAWD,aAAaC,QAAQ,SAAW,KAExEC,EAAa,CACfC,QAAS,CACL,eAAgB,mBAChBC,cAAc,UAADC,OAAYN,IAE7BO,iBAAiB,GASR1C,EAAiBA,IAAM2C,UAChC,IACI9C,EAAS,CAAE+C,KAAMC,EAAAA,KAEjB,MAAM,KAAEC,SAAeC,EAAAA,EAAMC,IAAI,GAADP,OAAIQ,EAAAA,EAAO,sBAAsBX,GAEjEzC,EAAS,CACL+C,KAAMM,EAAAA,GACNC,QAASL,GAGjB,CACA,MAAOM,GACHvD,EAAS,CACL+C,KAAMS,EAAAA,GACNF,QAASC,GAEjB,GA2GSE,EAAeA,IAAMX,UAC9B,IACI9C,EAAS,CAAE+C,KAAMW,EAAAA,KAEjB,MAAM,KAAET,SAAeC,EAAAA,EAAMS,KAAK,GAADf,OAAIQ,EAAAA,EAAO,0BAA0BX,GAEtEzC,EAAS,CACL+C,KAAMa,EAAAA,GACNN,QAASL,GAGjB,CACA,MAAOM,GACHvD,EAAS,CACL+C,KAAMc,EAAAA,GACNP,QAASC,GAEjB,E","sources":["Components/Layout/Event/LatestEvents.jsx","Components/Message/Message.js","Redux/Action/EventAction.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getLatestEvent } from '../../../Redux/Action/EventAction'\r\nimport Loader from '../../Message/Loader'\r\nimport Message from '../../Message/Message'\r\n\r\nconst LatestEvents = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getLatestEvent());\r\n    }, [dispatch])\r\n\r\n\r\n    const getLatestEvents = useSelector(state => state.getLatestEvent)\r\n    const { loading, events, error, success } = getLatestEvents\r\n\r\n\r\n\r\n    const LatestEvents = [\r\n        {\r\n            cover: 'https://tse2.mm.bing.net/th?id=OIP._jgRdIxBtUKFMCndkSCYIQAAAA&pid=Api&P=0&w=300&h=300',\r\n            story: 'Destiny of cup',\r\n            chapter: '15',\r\n            event: 'New Chapter',\r\n            date: '12/15/2024',\r\n            time: '10:55',\r\n            link: '',\r\n\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className='w-full bg-customOrange'>\r\n            <div className=\"grid divide-y divide-neutral-200 max-w-xl mx-auto mt-8 bottom-1 border border-black\">\r\n                <h1 className='m-1 p-5 text-5xl '>Latest Events</h1>\r\n                {loading && <Loader />}\r\n                {error && <Message>{error}</Message>}\r\n                {events?.length < 1 && <p>No event latest available</p>}\r\n                {\r\n                    events.map((event, index) => (\r\n                        <div className=\"py-5 bottom-2 border border-black\" key={index}>\r\n                            <details className=\"group\">\r\n                                <summary className=\"flex justify-between items-center font-medium cursor-pointer list-none\">\r\n                                    <div>\r\n                                        <img className='w-20 h-32' src={event.cover} alt='vndhwo' />\r\n                                    </div>\r\n                                    <span>{event.story}</span>\r\n                                    <span>{event.date}</span>\r\n                                    <span>{event.time}</span>\r\n                                    <span className=\"transition group-open:rotate-180\">\r\n                                        <svg fill=\"none\" height=\"24\" shape-rendering=\"geometricPrecision\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M6 9l6 6 6-6\"></path>\r\n                                        </svg>\r\n                                    </span>\r\n                                </summary>\r\n                                <p className=\"bg-orange-300 text-neutral-800 mt-3 group-open:animate-fadeIn\">\r\n                                    <Link to={event.link}>\r\n                                        {event.event}\r\n                                    </Link>\r\n                                </p>\r\n                            </details>\r\n                        </div>\r\n\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LatestEvents\r\n","import React from 'react'\r\n\r\nconst Message = ({Children}) => {\r\n  return (\r\n    <div>\r\n      {Children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios'\r\nimport {\r\n    GET_LATEST_EVENT_REQUEST,\r\n    GET_LATEST_EVENT_SUCCESS,\r\n    GET_LATEST_EVENT_ERROR,\r\n    GET_LATEST_EVENT_RESET,\r\n\r\n    GET_UPCOMING_EVENT_REQUEST,\r\n    GET_UPCOMING_EVENT_SUCCESS,\r\n    GET_UPCOMING_EVENT_ERROR,\r\n    GET_UPCOMING_EVENT_RESET,\r\n\r\n    CREATE_UPCOMING_EVENT_REQUEST,\r\n    CREATE_UPCOMING_EVENT_SUCCESS,\r\n    CREATE_UPCOMING_EVENT_ERROR,\r\n    CREATE_UPCOMING_EVENT_RESET,\r\n\r\n    DELETE_UPCOMING_EVENT_REQUEST,\r\n    DELETE_UPCOMING_EVENT_SUCCESS,\r\n    DELETE_UPCOMING_EVENT_ERROR,\r\n    DELETE_UPCOMING_EVENT_RESET,\r\n\r\n    UPDATE_UPCOMING_EVENT_REQUEST,\r\n    UPDATE_UPCOMING_EVENT_SUCCESS,\r\n    UPDATE_UPCOMING_EVENT_ERROR,\r\n    UPDATE_UPCOMING_EVENT_RESET,\r\n\r\n    GET_ANOUCEMENT_REQUEST,\r\n    GET_ANOUCEMENT_SUCCESS,\r\n    GET_ANOUCEMENT_ERROR,\r\n    GET_ANOUCEMENT_RESET,\r\n\r\n    DELETE_ANOUCEMENT_REQUEST,\r\n    DELETE_ANOUCEMENT_SUCCESS,\r\n    DELETE_ANOUCEMENT_ERROR,\r\n    DELETE_ANOUCEMENT_RESET,\r\n\r\n    UPDATE_ANOUCEMENT_REQUEST,\r\n    UPDATE_ANOUCEMENT_SUCCESS,\r\n    UPDATE_ANOUCEMENT_ERROR,\r\n    UPDATE_ANOUCEMENT_RESET,\r\n\r\n    CREATE_ANOUCEMENT_REQUEST,\r\n    CREATE_ANOUCEMENT_SUCCESS,\r\n    CREATE_ANOUCEMENT_ERROR,\r\n    CREATE_ANOUCEMENT_RESET,\r\n\r\n\r\n} from '../Constant/EventConstant'\r\nimport { backend}  from '../../Connection/conn'\r\nconst token = localStorage.getItem('token') ? localStorage.getItem('token') : null;\r\n\r\nconst Authconfig = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n    },\r\n    withCredentials: true,\r\n}\r\n\r\n/*const config = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n    }\r\n}*/\r\n\r\nexport const getLatestEvent = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_LATEST_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/event/list/latest`, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_LATEST_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_LATEST_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetLatestEvent = () => async (dispatch) => {\r\n        dispatch({ type: GET_LATEST_EVENT_RESET })\r\n}\r\n\r\nexport const getUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: GET_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const createUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: CREATE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetCreateUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: CREATE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const updateUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: UPDATE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetUpdateUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: UPDATE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const deleteUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: DELETE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: DELETE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetDeleteUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: DELETE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\n\r\n//--------------------------------------------------\r\n\r\n\r\nexport const getAnocement = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/event/list/anoucement`, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: GET_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const createAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: CREATE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetCreateAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: CREATE_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const updateAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: UPDATE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetUpdateAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: UPDATE_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const deleteAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: DELETE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: DELETE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetDeleteAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: DELETE_ANOUCEMENT_RESET })\r\n}"],"names":["LatestEvents","dispatch","useDispatch","useEffect","getLatestEvent","getLatestEvents","useSelector","state","loading","events","error","success","_jsx","className","children","_jsxs","Loader","Message","length","map","event","index","src","cover","alt","story","date","time","fill","height","stroke","viewBox","width","d","Link","to","link","_ref","Children","token","localStorage","getItem","Authconfig","headers","Authorization","concat","withCredentials","async","type","GET_LATEST_EVENT_REQUEST","data","axios","get","backend","GET_LATEST_EVENT_SUCCESS","payload","err","GET_LATEST_EVENT_ERROR","getAnocement","GET_ANOUCEMENT_REQUEST","post","GET_ANOUCEMENT_SUCCESS","GET_ANOUCEMENT_ERROR"],"sourceRoot":""}