{"version":3,"file":"static/js/776.f7f26a1c.chunk.js","mappings":"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","sources":["Components/Message/LoaderModel.jsx","Components/Message/Message.js","Screen/AuthScreen/RegisterScreen.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst LoaderModel = () => {\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 z-50\">\r\n      <div className=\"text-center\">\r\n        <div className=\"loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-32 w-32 mb-4\"></div>\r\n        <h2 className=\"text-white text-xl font-semibold\">Loading...</h2>\r\n        <p className=\"text-white text-sm mt-2\">Please wait</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoaderModel;\r\n","import React from 'react'\r\n\r\nconst Message = ({Children}) => {\r\n  return (\r\n    <div>\r\n      {Children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerUser } from '../../Redux/Action/UserAcrion';\r\nimport LoaderModel from '../../Components/Message/LoaderModel';\r\nimport Message from '../../Components/Message/Message';\r\n\r\nconst image = require('../AuthScreen/assets/reg.webp');\r\n\r\nconst RegisterScreen=()=> {\r\n    // Create refs for each input\r\n    const usernameRef = useRef();\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const confirmPasswordRef = useRef();\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    // Select loading, error, and success state from Redux store\r\n    const { loading, error, success, token } = useSelector((state) => state.userRegister); // Adjust the state slice based on your store\r\n\r\n    const registerFn = (event) => {\r\n        event.preventDefault(); // Prevent default form submission\r\n        const formData = {\r\n            username: usernameRef.current.value,\r\n            email: emailRef.current.value,\r\n            password: passwordRef.current.value,\r\n            confirmPassword: confirmPasswordRef.current.value,\r\n        };\r\n\r\n        if (Validate()) {\r\n            // Dispatch the register action\r\n            dispatch(registerUser(formData)); // Adjust based on your action implementation\r\n        }\r\n    };\r\n\r\n    const Validate = () => {\r\n        const usernamePattern = /^[a-zA-Z0-9]+$/; // Only letters and numbers are allowed\r\n        const usernameValue = usernameRef.current.value.trim();\r\n\r\n        // Check for username validation\r\n        if (!usernameValue) {\r\n            alert('Username is required');\r\n            usernameRef.current.focus(); // Navigate to username field\r\n            return false;\r\n        } else if (usernameValue.length < 8) {\r\n            alert('Username must be at least 8 characters long.');\r\n            usernameRef.current.focus(); // Navigate to username field\r\n            return false;\r\n        } else if (!usernamePattern.test(usernameValue)) {\r\n            alert('Username can only contain letters and numbers.');\r\n            usernameRef.current.focus(); // Navigate to username field\r\n            return false;\r\n        }\r\n\r\n        // Sanitize username\r\n        const sanitizedUsername = usernameValue.replace(/[<>&\"'\\\\`]/g, \"\");\r\n\r\n        const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/; // Basic email format validation\r\n        const emailValue = emailRef.current.value.trim(); // Assuming you have a ref for the email input\r\n\r\n        // Check for email validation\r\n        if (!emailValue) {\r\n            alert('Email is required');\r\n            emailRef.current.focus(); // Navigate to email field\r\n            return false;\r\n        } else if (emailValue.length < 5) { // Adjust minimum length if necessary\r\n            alert('Email must be at least 5 characters long.');\r\n            emailRef.current.focus(); // Navigate to email field\r\n            return false;\r\n        } else if (!emailPattern.test(emailValue)) {\r\n            alert('Please enter a valid email address.');\r\n            emailRef.current.focus(); // Navigate to email field\r\n            return false;\r\n        }\r\n\r\n\r\n        const passwordValue = passwordRef.current.value;\r\n        const confirmPasswordValue = confirmPasswordRef.current.value;\r\n\r\n        // Check if passwords match\r\n        if (passwordValue !== confirmPasswordValue) {\r\n            alert('Passwords do not match. Please try again.');\r\n            confirmPasswordRef.current.focus(); // Navigate to confirm password field\r\n            return false;\r\n        }\r\n\r\n        // Validate strong password\r\n        const strongPasswordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n        if (!strongPasswordPattern.test(passwordValue)) {\r\n            alert('Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one special character.');\r\n            passwordRef.current.focus(); // Navigate to password field\r\n            return false;\r\n        }\r\n\r\n        // Sanitize password\r\n        const sanitizedPassword = passwordValue.replace(/[<>&\"'\\\\`]/g, \"\");\r\n\r\n        // Store sanitized values\r\n        usernameRef.current.value = sanitizedUsername;\r\n        passwordRef.current.value = sanitizedPassword;\r\n        confirmPasswordRef.current.value = sanitizedPassword;\r\n\r\n        return true; // If all validations pass\r\n    };\r\n\r\n    // Effect to navigate on success\r\n    useEffect(() => {\r\n        if (success) {\r\n            navigate('/'); // Navigate to home on successful registration\r\n        }\r\n    }, [success, navigate]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row justify-center items-center h-screen bg-[#F9BEAD]\">\r\n            <div className=\"lg:p-36 md:p-20 sm:p-8 p-4 w-full lg:w-1/2 \">\r\n                <h1 className=\"text-2xl font-semibold mb-4\">Register</h1>\r\n\r\n                {loading && <LoaderModel />}\r\n                {success && <Message>Registration successful!</Message>}\r\n\r\n                <form onSubmit={registerFn}>\r\n                {error && <Message>{error}</Message>}\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"username\" className=\"block text-gray-600\">Username</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            name=\"username\"\r\n                            ref={usernameRef}\r\n                            className=\"w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"username\" className=\"block text-gray-600\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            ref={emailRef}\r\n                            className=\"w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"password\" className=\"block text-gray-800\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            ref={passwordRef}\r\n                            className=\"w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"confirmPassword\" className=\"block text-gray-800\">Confirm Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            ref={confirmPasswordRef}\r\n                            className=\"w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"bg-red-500 hover:bg-blue-600 text-white font-semibold rounded-md py-2 px-4 w-full\">\r\n                        Register\r\n                    </button>\r\n                </form>\r\n                <div className=\"mt-6 text-green-500 text-center\">\r\n                    <Link to=\"/login\" className=\"hover:underline\">Sign in Here</Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"w-full lg:w-1/2 hidden lg:block h-screen\">\r\n                <img src={image} alt=\"Placeholder\" className=\"object-cover w-full h-screen\" />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default RegisterScreen;"],"names":["LoaderModel","_jsx","className","children","_jsxs","_ref","Children","image","require","RegisterScreen","usernameRef","useRef","emailRef","passwordRef","confirmPasswordRef","dispatch","useDispatch","navigate","useNavigate","loading","error","success","token","useSelector","state","userRegister","Validate","usernameValue","current","value","trim","alert","focus","length","test","sanitizedUsername","replace","emailValue","passwordValue","sanitizedPassword","useEffect","Message","onSubmit","event","preventDefault","formData","username","email","password","confirmPassword","registerUser","htmlFor","type","id","name","ref","autoComplete","Link","to","src","alt"],"sourceRoot":""}