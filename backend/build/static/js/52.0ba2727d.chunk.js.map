{"version":3,"file":"static/js/52.0ba2727d.chunk.js","mappings":"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","sources":["Redux/Action/EventAction.js","Components/Layout/Event/ListMyStoryes.jsx","Screen/AddEvent/createAnocementScreen.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport {\r\n    GET_LATEST_EVENT_REQUEST,\r\n    GET_LATEST_EVENT_SUCCESS,\r\n    GET_LATEST_EVENT_ERROR,\r\n    GET_LATEST_EVENT_RESET,\r\n\r\n    GET_UPCOMING_EVENT_REQUEST,\r\n    GET_UPCOMING_EVENT_SUCCESS,\r\n    GET_UPCOMING_EVENT_ERROR,\r\n    GET_UPCOMING_EVENT_RESET,\r\n\r\n    CREATE_UPCOMING_EVENT_REQUEST,\r\n    CREATE_UPCOMING_EVENT_SUCCESS,\r\n    CREATE_UPCOMING_EVENT_ERROR,\r\n    CREATE_UPCOMING_EVENT_RESET,\r\n\r\n    DELETE_UPCOMING_EVENT_REQUEST,\r\n    DELETE_UPCOMING_EVENT_SUCCESS,\r\n    DELETE_UPCOMING_EVENT_ERROR,\r\n    DELETE_UPCOMING_EVENT_RESET,\r\n\r\n    UPDATE_UPCOMING_EVENT_REQUEST,\r\n    UPDATE_UPCOMING_EVENT_SUCCESS,\r\n    UPDATE_UPCOMING_EVENT_ERROR,\r\n    UPDATE_UPCOMING_EVENT_RESET,\r\n\r\n    GET_ANOUCEMENT_REQUEST,\r\n    GET_ANOUCEMENT_SUCCESS,\r\n    GET_ANOUCEMENT_ERROR,\r\n    GET_ANOUCEMENT_RESET,\r\n\r\n    DELETE_ANOUCEMENT_REQUEST,\r\n    DELETE_ANOUCEMENT_SUCCESS,\r\n    DELETE_ANOUCEMENT_ERROR,\r\n    DELETE_ANOUCEMENT_RESET,\r\n\r\n    UPDATE_ANOUCEMENT_REQUEST,\r\n    UPDATE_ANOUCEMENT_SUCCESS,\r\n    UPDATE_ANOUCEMENT_ERROR,\r\n    UPDATE_ANOUCEMENT_RESET,\r\n\r\n    CREATE_ANOUCEMENT_REQUEST,\r\n    CREATE_ANOUCEMENT_SUCCESS,\r\n    CREATE_ANOUCEMENT_ERROR,\r\n    CREATE_ANOUCEMENT_RESET,\r\n\r\n\r\n} from '../Constant/EventConstant'\r\nimport { backend}  from '../../Connection/conn'\r\nconst token = localStorage.getItem('token') ? localStorage.getItem('token') : null;\r\n\r\nconst Authconfig = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n    },\r\n    withCredentials: true,\r\n}\r\n\r\n/*const config = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n    }\r\n}*/\r\n\r\nexport const getLatestEvent = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_LATEST_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/event/list/latest`, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_LATEST_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_LATEST_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetLatestEvent = () => async (dispatch) => {\r\n        dispatch({ type: GET_LATEST_EVENT_RESET })\r\n}\r\n\r\nexport const getUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: GET_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const createUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: CREATE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetCreateUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: CREATE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const updateUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: UPDATE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetUpdateUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: UPDATE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\nexport const deleteUpcomingEvent = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_UPCOMING_EVENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: DELETE_UPCOMING_EVENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: DELETE_UPCOMING_EVENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetDeleteUpcomingEvent = () => async (dispatch) => {\r\n        dispatch({ type: DELETE_UPCOMING_EVENT_RESET })\r\n}\r\n\r\n\r\n//--------------------------------------------------\r\n\r\n\r\nexport const getAnocement = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/event/list/anoucement`, Authconfig)\r\n\r\n        dispatch({\r\n            type: GET_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetGetAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: GET_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const createAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/event/create/anoucement`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: CREATE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetCreateAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: CREATE_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const updateAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: UPDATE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetUpdateAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: UPDATE_ANOUCEMENT_RESET })\r\n}\r\n\r\nexport const deleteAnoucement = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_ANOUCEMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: DELETE_ANOUCEMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: DELETE_ANOUCEMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetDeleteAnoucement = () => async (dispatch) => {\r\n        dispatch({ type: DELETE_ANOUCEMENT_RESET })\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { backend } from '../../../Connection/conn'\r\n\r\nconst ListMyStoryes = () => {\r\n    const [options,setOptions] = useState([])\r\n    const [loading,setLoading] = useState(false)\r\n    const ExtractStory = async () => {\r\n        try{\r\n            setLoading(true)\r\n            const {data} = await axios.get(`${backend}/api/story/list`)\r\n            setOptions(data)\r\n            setLoading(false)\r\n            console.log('hit')\r\n        }catch(error){\r\n            console.log(error)\r\n            setLoading(false)\r\n        }\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        if(!options[0]?._id){\r\n            ExtractStory();\r\n        }\r\n    },[options])\r\n\r\n    const HandleChange = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n            <select\r\n                id=\"story\"\r\n                onChange={() => HandleChange}\r\n                className=\"block pr-10 shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-orange-500 transition duration-500 ease-in-out\"\r\n            >\r\n                <option value={''}>select</option> \r\n               {loading && <option>Loading</option> }\r\n                {\r\n                    options.map((item, index) => (\r\n                        <option value={item._id} key={index}> {item.name} </option>\r\n                    ))\r\n                }\r\n\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListMyStoryes\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport ListMyStoryes from '../../Components/Layout/Event/ListMyStoryes';\r\nimport { createAnoucement } from '../../Redux/Action/EventAction';\r\nimport { useSelector } from 'react-redux'\r\nimport { CREATE_ANOUCEMENT_RESET } from '../../Redux/Constant/EventConstant';\r\n\r\nconst CreateAnocementScreen = ({dispatch}) => {\r\n\r\n  const createAnoucements = useSelector(state=>state.createAnoucement)\r\n  const { loading , event:events , error , success } = createAnoucements\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [event, setEvent] = useState(''); // Keep track of selected event\r\n  const [story, setStory] = useState(''); // Selected story\r\n  const [chapter, setChapter] = useState(''); // Selected chapter\r\n  const [message, setMessage] = useState(''); // Message text\r\n  const [eventDate, setEventDate] = useState(''); // Event date\r\n  const [eventTime, setEventTime] = useState(''); // Event time\r\n  const [expireDate, setExpireDate] = useState(''); // Expire date\r\n  const [expireTime, setExpireTime] = useState(''); // Expire time\r\n  const [WantToUploadCover, setWantToUploadCover] = useState(false); // Cover upload flag\r\n  const [coverFile, setCoverFile] = useState(null); // Cover file\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    // You can handle form validation here before proceeding\r\n    if (!event || !message || !eventDate || !expireDate) {\r\n      alert('Please fill in all required fields!');\r\n      return;\r\n    }\r\n\r\n    const announcementData = {\r\n      event,\r\n      story,\r\n      chapter,\r\n      message,\r\n      eventDate,\r\n      eventTime,\r\n      expireDate,\r\n      expireTime,\r\n      coverFile,\r\n    };\r\n\r\n    if(ValidateForm(announcementData)){\r\n      dispatch(createAnoucement(announcementData));\r\n    }else{\r\n      alert('Something went wrong...!')\r\n    }\r\n    \r\n  };\r\n\r\n  const ValidateForm = (form) => {\r\n\r\n    if (form) {\r\n      if (message == '') {\r\n        alert('message cant be empty...!');\r\n        return false\r\n      }\r\n\r\n      if (eventDate == '') {\r\n        alert('event date cant be empty...!');\r\n        return false\r\n      }\r\n\r\n      if (eventTime == '') {\r\n        alert('event time cant be empty...!');\r\n        return false\r\n      }\r\n\r\n      if (expireDate == '') {\r\n        alert('expire date cant be empty...!');\r\n        return false\r\n      }\r\n\r\n      if (expireTime == '') {\r\n        alert('expire time cant be empty...!');\r\n        return false\r\n      }\r\n        \r\n        \r\n    }\r\n    return true;\r\n  }\r\n\r\n  const UploadImage = (file) => {\r\n    console.log('files', file)\r\n    setCoverFile()\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(success){\r\n      dispatch({type:CREATE_ANOUCEMENT_RESET})\r\n      navigate('/')\r\n    }\r\n  },[success])\r\n\r\n  return (\r\n    <div className=\"mx-auto container flex items-center\" id=\"nav\">\r\n      <div className=\"w-full pt-2 p-4\">\r\n        <div className=\"mx-auto md:p-6 md:w-1/2\">\r\n          <div className=\"flex flex-wrap justify-between\">\r\n            <h1 className=\"text-2xl text-orange-500 hover:text-orange-500 transition duration-500 p-4\">\r\n              <i className=\"fas fa-sign-in-alt fa-fw fa-lg\"></i>\r\n              Announcement\r\n            </h1>\r\n            <Link to=\"/\" className=\"mt-8 text-orange-400 hover:text-orange-600 transition duration-500\">\r\n              <svg className=\"w-6 h-6 inline-block align-bottom\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"></path>\r\n              </svg>\r\n              Back to Home\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n            <form onSubmit={submitHandler}>\r\n              {/* Event Selector */}\r\n              <div className=\"mb-8\">\r\n                <label htmlFor=\"event\" className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                  <span className=\"text-red-500\">*</span> Event\r\n                </label>\r\n                <select\r\n                  onChange={(e) => setEvent(e.target.value)}\r\n                  value={event}\r\n                  id=\"event\"\r\n                  className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3 focus:outline-none focus:bg-white focus:border-orange-500\"\r\n                >\r\n                  <option value=\"select\">Select</option>\r\n                  <option value=\"NewStory\">New Story</option>\r\n                  <option value=\"NewChapter\">New Chapter</option>\r\n                  <option value=\"AboutChapter\">About Chapter</option>\r\n                  <option value=\"AboutStory\">About Story</option>\r\n                </select>\r\n                {!event && <strong className=\"text-red-500 text-xs italic\">Event is required</strong>}\r\n              </div>\r\n\r\n              {/* Conditional Story Selection */}\r\n              {event === 'NewChapter' && (\r\n                <div className=\"mb-8\">\r\n                  <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                    <span className=\"text-red-500\">*</span> Story\r\n                  </label>\r\n                  <ListMyStoryes setStory={setStory} />\r\n                  {!story && <strong className=\"text-red-500 text-xs italic\">Story is required</strong>}\r\n                </div>\r\n              )\r\n              }\r\n              {\r\n                event !== 'select' && event !== '' && (\r\n                  <>\r\n                    {/* Conditional Chapter Input */}\r\n                    {event === 'AboutChapter' && (\r\n                      <div className=\"mb-8\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                          <span className=\"text-red-500\">*</span> Chapter\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={chapter}\r\n                          onChange={(e) => setChapter(e.target.value)}\r\n                          className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3 focus:outline-none focus:bg-white focus:border-orange-500\"\r\n                        />\r\n                        {!chapter && <strong className=\"text-red-500 text-xs italic\">Chapter is required</strong>}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Message */}\r\n                    <div className=\"mb-8\">\r\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                        <span className=\"text-red-500\">*</span> Message\r\n                      </label>\r\n                      <textarea\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3 focus:outline-none focus:bg-white focus:border-orange-500\"\r\n                      />\r\n                      {!message && <strong className=\"text-red-500 text-xs italic\">Message is required</strong>}\r\n                    </div>\r\n\r\n                    {/* Event Date */}\r\n                    <div className=\"mb-8\">\r\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                        <span className=\"text-red-500\">*</span> Event Date\r\n                      </label>\r\n                      <input\r\n                        type=\"date\"\r\n                        value={eventDate}\r\n                        onChange={(e) => setEventDate(e.target.value)}\r\n                        className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3\"\r\n                      />\r\n                      <input\r\n                        type=\"time\"\r\n                        value={eventTime}\r\n                        onChange={(e) => setEventTime(e.target.value)}\r\n                        className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3\"\r\n                      />\r\n                      {!eventDate && <strong className=\"text-red-500 text-xs italic\">Event Date is required</strong>}\r\n                    </div>\r\n\r\n                    {/* Expire Date */}\r\n                    <div className=\"mb-8\">\r\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                        <span className=\"text-red-500\">*</span> Expire Date\r\n                      </label>\r\n                      <input\r\n                        type=\"date\"\r\n                        value={expireDate}\r\n                        onChange={(e) => setExpireDate(e.target.value)}\r\n                        className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3\"\r\n                      />\r\n                      <input\r\n                        type=\"time\"\r\n                        value={expireTime}\r\n                        onChange={(e) => setExpireTime(e.target.value)}\r\n                        className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3\"\r\n                      />\r\n                      {!expireDate && <strong className=\"text-red-500 text-xs italic\">Expire Date is required</strong>}\r\n                    </div>\r\n\r\n                    {/* Upload Cover */}\r\n                    <div className=\"mb-8\">\r\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={WantToUploadCover}\r\n                          onChange={(e) => setWantToUploadCover(e.target.checked)}\r\n                          className=\"mr-2\"\r\n                        />\r\n                        Want to upload cover\r\n                      </label>\r\n                    </div>\r\n\r\n                    {WantToUploadCover && (\r\n                      <div className=\"mb-8\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                          <span className=\"text-red-500\">*</span> Upload Cover\r\n                        </label>\r\n                        <input\r\n                          type=\"file\"\r\n                          onChange={(e) => UploadImage(e.target.files[0])}\r\n                          className=\"block shadow appearance-none border-2 border-orange-100 rounded w-full py-2 px-4 text-gray-700 mb-3\"\r\n                        />\r\n                        {!coverFile && <strong className=\"text-red-500 text-xs italic\">Cover is required</strong>}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Submit Button */}\r\n                    <div className=\"mb-4 text-center\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"transition duration-500 bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      >\r\n                        Announce\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                )\r\n              }\r\n              <hr />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateAnocementScreen;\r\n"],"names":["token","localStorage","getItem","Authconfig","headers","Authorization","concat","withCredentials","getLatestEvent","async","dispatch","type","GET_LATEST_EVENT_REQUEST","data","axios","get","backend","GET_LATEST_EVENT_SUCCESS","payload","err","GET_LATEST_EVENT_ERROR","getAnocement","GET_ANOUCEMENT_REQUEST","post","GET_ANOUCEMENT_SUCCESS","GET_ANOUCEMENT_ERROR","createAnoucement","fdata","CREATE_ANOUCEMENT_REQUEST","CREATE_ANOUCEMENT_SUCCESS","CREATE_ANOUCEMENT_ERROR","ListMyStoryes","options","setOptions","useState","loading","setLoading","useEffect","_options$","_id","console","log","error","ExtractStory","HandleChange","_jsx","className","children","_jsxs","id","onChange","value","map","item","index","name","_ref","createAnoucements","useSelector","state","event","events","success","navigate","useNavigate","setEvent","story","setStory","chapter","setChapter","message","setMessage","eventDate","setEventDate","eventTime","setEventTime","expireDate","setExpireDate","expireTime","setExpireTime","WantToUploadCover","setWantToUploadCover","coverFile","setCoverFile","ValidateForm","form","alert","CREATE_ANOUCEMENT_RESET","Link","to","fill","strokeLinecap","strokeLinejoin","strokeWidth","stroke","viewBox","d","onSubmit","e","preventDefault","announcementData","htmlFor","target","_Fragment","checked","UploadImage","file","files"],"sourceRoot":""}