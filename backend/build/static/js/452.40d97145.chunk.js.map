{"version":3,"file":"static/js/452.40d97145.chunk.js","mappings":"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","sources":["Components/Element/Stars.jsx","Components/Message/LoaderModel.jsx","Redux/Action/StoryAction.js","Components/Layout/AddComment.jsx","Components/Layout/ListChapter.jsx","Components/Layout/ListComment.jsx","Redux/Action/CommentAction.js","Components/Layout/BookDetails.jsx","Screen/BookScreen/DisplayBook.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst Stars = ({rating,count}) => {\r\n    return (\r\n        <span className=\"flex items-center\">\r\n            {[...Array(5)].map((_, index) => (\r\n                <svg\r\n                    key={index}\r\n                    fill={rating >= index + 1 ? 'currentColor' : 'none'}\r\n                    stroke=\"currentColor\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    className=\"w-4 h-4 text-red-500\"\r\n                    viewBox=\"0 0 24 24\"\r\n                >\r\n                    <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\r\n                </svg>\r\n            ))}\r\n            <span className=\"text-gray-600 ml-3\">{count} Reviews</span>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Stars\r\n","import React from 'react';\r\n\r\nconst LoaderModel = () => {\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 z-50\">\r\n      <div className=\"text-center\">\r\n        <div className=\"loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-32 w-32 mb-4\"></div>\r\n        <h2 className=\"text-white text-xl font-semibold\">Loading...</h2>\r\n        <p className=\"text-white text-sm mt-2\">Please wait</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoaderModel;\r\n","import axios from 'axios'\r\nimport {\r\n    CREATE_STORY_REQUEST,\r\n    CREATE_STORY_SUCCESS,\r\n    CREATE_STORY_ERROR,\r\n\r\n    CREATE_CHAPTER_REQUEST,\r\n    CREATE_CHAPTER_SUCCESS,\r\n    CREATE_CHAPTER_ERROR,\r\n\r\n    LIST_STORY_REQUEST,\r\n    LIST_STORY_SUCCESS,\r\n    LIST_STORY_ERROR,\r\n\r\n    READ_CHAPTER_REQUEST,\r\n    READ_CHAPTER_SUCCESS,\r\n    READ_CHAPTER_ERROR,\r\n\r\n    READ_STORY_DETAILS_REQUEST,\r\n    READ_STORY_DETAILS_SUCCESS,\r\n    READ_STORY_DETAILS_ERROR,\r\n\r\n    LIST_CHAPTER_REQUEST,\r\n    LIST_CHAPTER_SUCCESS,\r\n    LIST_CHAPTER_ERROR,\r\n\r\n    UPDATE_CHAPTER_REQUEST,\r\n    UPDATE_CHAPTER_SUCCESS,\r\n    UPDATE_CHAPTER_ERROR,\r\n\r\n    LIST_ADMIN_STORY_REQUEST,\r\n    LIST_ADMIN_STORY_SUCCESS,\r\n    LIST_ADMIN_STORY_ERROR,\r\n\r\n    LIST_ADMIN_CHAPTER_REQUEST,\r\n    LIST_ADMIN_CHAPTER_SUCCESS,\r\n    LIST_ADMIN_CHAPTER_ERROR,\r\n\r\n    UPDATE_STORY_REQUEST,\r\n    UPDATE_STORY_SUCCESS,\r\n    UPDATE_STORY_ERROR,\r\n\r\n    CREATE_COMMENT_REQUEST,\r\n    CREATE_COMMENT_SUCCESS,\r\n    CREATE_COMMENT_ERROR,\r\n\r\n    GET_COMMENT_REQUEST,\r\n    GET_COMMENT_SUCCESS,\r\n    GET_COMMENT_ERROR,\r\n\r\n\r\n\r\n} from '../Constant/StoryConstant'\r\nimport { backend } from '../../Connection/conn'\r\n\r\nconst token = localStorage.getItem('token') ? localStorage.getItem('token') : null;\r\n\r\nexport const Authconfig = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n    },\r\n    withCredentials: true,\r\n}\r\n\r\nexport const config = {\r\n    headers: {\r\n        'Content-type': 'application/json',\r\n    }\r\n}\r\n\r\n\r\nexport const createStory = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_STORY_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/create/`, fdata, Authconfig)\r\n\r\n        dispatch({\r\n            type: CREATE_STORY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_STORY_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const listStory = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LIST_STORY_REQUEST })\r\n        const token = localStorage.getItem('token') ? localStorage.getItem('token') : null;\r\n        const Authconfig = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                ...(token && { Authorization: `Bearer ${token}` }), \r\n            },\r\n            withCredentials: true,\r\n        }\r\n\r\n        const { data } = await axios.get(`${backend}/api/story/list`, Authconfig)\r\n        dispatch({\r\n            type: LIST_STORY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: LIST_STORY_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const listStoryDetails = (storyid) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: READ_STORY_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/story/${storyid}`, config)\r\n        \r\n        dispatch({\r\n            type: READ_STORY_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: READ_STORY_DETAILS_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const createChapter = (storyid, fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_CHAPTER_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/${storyid}/chapter/create/`, fdata, Authconfig)\r\n        dispatch({\r\n            type: CREATE_CHAPTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_CHAPTER_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const listChapter = (storyid) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LIST_CHAPTER_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/story/${storyid}/chapter/list`, config)\r\n        dispatch({\r\n            type: LIST_CHAPTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: LIST_CHAPTER_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const readChapter = (storyid, chapterid) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: READ_CHAPTER_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/story/${storyid}/chapter/${chapterid}`, config)\r\n        dispatch({\r\n            type: READ_CHAPTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: READ_CHAPTER_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listAdminStory = (page=1) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LIST_ADMIN_STORY_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/admin/story/list${page ? `?page=${page}` : ''}`, Authconfig)\r\n        dispatch({\r\n            type: LIST_ADMIN_STORY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: LIST_ADMIN_STORY_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const listAdminChapter = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LIST_ADMIN_CHAPTER_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/admin/story/${id}/chapter/list`, Authconfig)\r\n        dispatch({\r\n            type: LIST_ADMIN_CHAPTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: LIST_ADMIN_CHAPTER_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateChapter = (storyid, chapterid, fdata) => async (dispatch) => {\r\n    try {\r\n        console.log(fdata)\r\n        dispatch({ type: UPDATE_CHAPTER_REQUEST })\r\n\r\n        const { data } = await axios.put(`${backend}/api/story/${storyid}/chapter/${chapterid}/update`, fdata, Authconfig)\r\n        dispatch({\r\n            type: UPDATE_CHAPTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_CHAPTER_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStory = (storyid, fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_STORY_REQUEST })\r\n\r\n        const { data } = await axios.put(`${backend}/api/story/${storyid}/update`, fdata, Authconfig)\r\n        dispatch({\r\n            type: UPDATE_STORY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: UPDATE_STORY_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createComment = (fdata) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CREATE_COMMENT_REQUEST })\r\n\r\n        const { data } = await axios.post(`${backend}/api/story/${fdata.storyid}/comment/create`, fdata, Authconfig)\r\n        dispatch({\r\n            type: CREATE_COMMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: CREATE_COMMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\nexport const listComment = (storyid) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GET_COMMENT_REQUEST })\r\n\r\n        const { data } = await axios.get(`${backend}/api/story/${storyid}/comment/list`, config)\r\n        dispatch({\r\n            type: GET_COMMENT_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_COMMENT_ERROR,\r\n            payload: err\r\n        })\r\n    }\r\n}","import React, { useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createComment } from '../../Redux/Action/StoryAction';\r\n\r\nconst AddComment = ({ type, id }) => {\r\n\r\n    const createComments = useSelector(state=>state.createComment)\r\n    const { loading , error , success , comment:comments} = createComments\r\n\r\n    const [rate, setValue] = useState(0);\r\n    const [comment, setComment] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const commentRef = useRef('');\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault(); \r\n        \r\n        // Ensure `type`, `rating`, and `commentRef.current` exist before creating the form\r\n        const form = {\r\n            storyid:id,\r\n            type: type || \"\",  // default to an empty string if `type` is undefined\r\n            rate:rate || 0,  // set default rate to 0 if `rateRef` is undefined\r\n            comment: commentRef.current ? commentRef.current.value : \"\"  // default comment to an empty string\r\n        };\r\n    \r\n        // Dispatch the action \r\n        dispatch(createComment(form));\r\n    \r\n        // Clear form fields after submission\r\n        if (commentRef.current) commentRef.current.value = '';\r\n        setValue(0);  // If this is resetting a state value (e.g., a rating component), keep it\r\n    };\r\n\r\n    const handleRating = (e) =>{\r\n        e.preventDefault();\r\n        setValue(e.target.value == rate ? 0 : e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"max-w-4xl py-16 xl:px-8 flex justify-center mx-auto\">\r\n            <div className=\"w-full mt-16 md:mt-0\">\r\n                {loading && <h1>Loading...</h1>}\r\n                {error && <h1>Error...</h1>}\r\n                <form\r\n                    onSubmit={(e) => submitHandler(e)}\r\n                    className=\"relative z-10 h-auto p-8 py-10 bg-white border-b-2 border-gray-300 rounded-lg shadow-2xl px-7\">\r\n                    <h3 className=\"mb-6 text-2xl font-medium text-center\">Write a Comment</h3>\r\n\r\n                    {/* Rating Section */}\r\n                    <div className=\"mb-6 text-center\">\r\n                        <h4 className=\"mb-2 text-lg font-medium\">Rate this:</h4>\r\n                        <div className=\"flex justify-center\">\r\n                            {[1, 2, 3, 4, 5].map((star, index) => (\r\n                                <label key={star} className=\"flex items-center cursor-pointer\">\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        name=\"rating\"\r\n                                        value={star}\r\n                                        className=\"hidden\"\r\n                                        onClick={(e) => handleRating(e)}\r\n                                    />\r\n                                    {\r\n                                        rate >= star ? (\r\n                                            <svg\r\n                                                className=\"w-6 h-6 text-yellow-500 hover:text-yellow-200\"\r\n                                                fill=\"currentColor\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            >\r\n                                                <path d=\"M12 .587l3.668 7.428 8.193 1.187-5.917 5.252 1.396 8.157L12 18.897l-7.34 4.083 1.396-8.157-5.917-5.252 8.193-1.187z\" />\r\n                                            </svg>\r\n                                        )\r\n                                            :\r\n                                            (\r\n                                                <svg\r\n                                                    className=\"w-6 h-6 text-gray-300 hover:text-yellow-500\"\r\n                                                    fill=\"currentColor\"\r\n                                                    viewBox=\"0 0 24 24\"\r\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                >\r\n                                                    <path d=\"M12 .587l3.668 7.428 8.193 1.187-5.917 5.252 1.396 8.157L12 18.897l-7.34 4.083 1.396-8.157-5.917-5.252 8.193-1.187z\" />\r\n                                                </svg>\r\n                                            )\r\n                                    }\r\n\r\n                                </label>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Comment Textarea */}\r\n                    <textarea\r\n                        name=\"comment\"\r\n                        className=\"w-full px-4 py-3  border-2 border-gray-200 rounded-lg focus:ring-blue-500 focus:outline-none\"\r\n                        placeholder=\"Write your comment\"\r\n                        rows=\"5\"\r\n                        required\r\n                        maxLength={500}\r\n                        onChange={(e) => setComment(e.target.value)}\r\n                        ref={commentRef}\r\n                    >\r\n                    </textarea>\r\n                    <p\r\n                        className='mb-4 text-right'\r\n                    >{commentRef.current.value?.length ? commentRef.current.value?.length : '0'}/500</p>\r\n\r\n\r\n                    {/* Submit Button */}\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Submit Comment\"\r\n                        className=\"text-white px-4 py-3 bg-blue-500 rounded-lg hover:bg-slate-700\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddComment\r\n","import React, { useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { listChapter } from '../../Redux/Action/StoryAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n//import { CorrectUrl } from '../../Helper/ImageUrlCorrect';\r\nimport { backend } from '../../Connection/conn';\r\n\r\nconst ListChapter = () => {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n\r\n    const ListChapterState = useSelector(state => state.listChapter);\r\n    const {\r\n        // loading, error,\r\n         chapters } = ListChapterState;\r\n\r\n    // State to hold resolved image URLs\r\n\r\n    useEffect(() => {\r\n        // Fetch the chapters when the id changes\r\n        dispatch(listChapter(id));\r\n        console.log('com reloaders')\r\n    }, [id, dispatch]);\r\n\r\n    console.log(typeof chapters)\r\n\r\n   // useEffect(() => {\r\n        // Function to resolve chapter cover URLs\r\n     /*   const fetchUrls = async () => {\r\n            const urls = {};\r\n            const chapterArray = Object.values(chapters); // Convert chapters object to an array\r\n            for (const chapter of chapterArray) {\r\n                if (chapter.cover) {\r\n                    try {\r\n                        const resolvedUrl = await CorrectUrl(chapter.cover);\r\n                        urls[chapter.ChapterId] = resolvedUrl;\r\n                    } catch (error) {\r\n                        console.error('Error fetching URL for chapter:', chapter.title, error);\r\n                        urls[chapter.ChapterId] = '/path/to/placeholder-image.jpg'; // Fallback image\r\n                    }\r\n                } else {\r\n                    urls[chapter.ChapterId] = '/path/to/placeholder-image.jpg'; // Fallback image\r\n                }\r\n            }\r\n   //     };\r\n\r\n        if (chapters && typeof chapters === 'object') {\r\n        }\r\n    }, [chapters,id]);*/\r\n\r\n    if (!chapters || typeof chapters !== 'object') return null;\r\n    console.log(chapters)\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"text-2xl mt-4 text-gray-500 font-bold text-center\">Chapters</h2>\r\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 pb-10 mt-8 sm:mt-16 w-full\">\r\n                {chapters.map((chapter, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"flex flex-col items-start overflow-hidden shadow-lg rounded-xl transition-transform duration-300 transform hover:scale-105\"\r\n                    >\r\n                        <Link to={`/story/${id}/chapter/${chapter._id}`} className=\"block w-full\">\r\n                            <img\r\n                                className=\"object-cover w-full h-48 rounded-t-xl transition duration-300 transform hover:scale-105\"\r\n                                src={ chapter.cover } // Use resolved URL or fallback\r\n                                alt={`Chapter cover for ${chapter.title}`}\r\n                            />\r\n\r\n                        </Link>\r\n\r\n                        <div className=\"relative flex flex-col items-start p-4 bg-white border-t border-gray-200 rounded-b-xl\">\r\n                            <h2 className=\"text-lg font-semibold text-gray-800 truncate\">\r\n                                <Link to={`/story/${id}/chapter/${chapter._id}`} className=\"hover:text-blue-600\">\r\n                                    {chapter._id} : {chapter.title}\r\n                                </Link>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListChapter;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { listComment } from '../../Redux/Action/StoryAction';\r\nimport { deleteComment } from '../../Redux/Action/CommentAction';\r\nimport { GET_COMMENT_SUCCESS } from '../../Redux/Constant/StoryConstant';\r\n\r\nconst ListComment = () => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n\r\n  const { loading, error, comments = [] } = useSelector(state => state.listComments);\r\n  \r\n  const [delLoading, setDelLoading] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(listComment(id));\r\n  }, [dispatch, id, refresh]);\r\n\r\n  const getRandomColorClass = () => {\r\n    const colors = ['bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-yellow-500', 'bg-purple-500', 'bg-pink-500'];\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n  };\r\n\r\n  const deleteMyComments = async (e, commentId) => {\r\n    e.preventDefault();\r\n    if (delLoading) return;\r\n\r\n    try {\r\n      setDelLoading(true);\r\n      const result = await dispatch(deleteComment(commentId));\r\n\r\n      if (result === 'success') {\r\n        const updatedComments = comments.filter(item => item._id !== commentId);\r\n        dispatch({\r\n          type: GET_COMMENT_SUCCESS,\r\n          payload: { comments: updatedComments },\r\n        });\r\n      } else {\r\n        alert(result);\r\n      }\r\n    } catch (error) {\r\n      alert(\"Something went wrong...!\");\r\n    } finally {\r\n      setDelLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl px-10 py-16 mx-auto bg-gray-100 min-w-screen\">\r\n      <p className=\"mt-1 text-2xl font-bold text-left text-gray-800 sm:text-center\">\r\n        All Comments on this Post\r\n      </p>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error...</p>}\r\n      {comments.length === 0 && !loading && <p>No comments...!</p>}\r\n\r\n      {comments.map(item => (\r\n        <div key={item._id} className=\"flex items-center w-full px-6 py-6 mx-auto mt-2 bg-white border border-gray-200 rounded-lg\">\r\n          <div className={`flex items-center justify-center ${getRandomColorClass()} text-white font-bold text-2xl rounded-full w-20 h-16`}>\r\n            {item.username?.charAt(0).toUpperCase()}\r\n          </div>\r\n          <div className=\"w-full mx-2\">\r\n            <p className=\"text-lg font-bold text-left text-gray-800\">{item.username}</p>\r\n            <p className=\"text-sm text-left text-gray-500\">{item.comment}</p>\r\n          </div>\r\n          {item.user === JSON.parse(sessionStorage.getItem('user'))._id && (\r\n            <div className=\"flex justify-end mx-2\">\r\n              <button onClick={(e) => deleteMyComments(e, item._id)} disabled={delLoading}>\r\n                {delLoading ? 'Loading...' : 'Delete'}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      <button onClick={() => setRefresh(!refresh)} className=\"mt-4 p-2 bg-blue-500 text-white rounded\">\r\n        Load More Comments\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListComment;\r\n","import axios from \"axios\"\r\nimport { Authconfig } from \"./StoryAction\"\r\nimport { backend } from \"../../Connection/conn\"\r\n\r\nexport const deleteComment = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await axios.delete(`${backend}/api/comment/delete/${id}`, Authconfig)\r\n        return 'success'\r\n    }\r\n    catch (err) {\r\n        return err;\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Stars from '../Element/Stars'\r\n\r\nconst BookDetails = ({ book }) => {\r\n    const [cover, setCover] = useState();\r\n\r\n    // Avoid setting state during render. Move it into useEffect.\r\n  /*  useEffect(() => {\r\n        if (book && book.cover) {\r\n            CorrectUrl(book.cover).then((cor) => {\r\n              //  setCover(cor); // Set the cover only when the correct URL is resolved\r\n            });\r\n        }\r\n    }, [book]);*/\r\n\r\n    // Return null if book is undefined to avoid rendering an empty UI\r\n    if (!book) {\r\n        return null;\r\n    }\r\n  \r\n    console.log(book.cover)\r\n\r\n    return (\r\n        <section className=\"text-gray-700 body-font overflow-hidden bg-white\">\r\n            \r\n            <div className=\"container px-5 py-24 mx-auto\">\r\n                <div className=\"lg:w-4/5 mx-auto flex flex-wrap\">\r\n                    <img\r\n                        alt=\"ecommerce\"\r\n                        className=\"lg:w-1/2 w-full object-cover object-center rounded border border-gray-200\"\r\n                        src={book.cover}\r\n                        loading=\"lazy\"\r\n                    />\r\n                    <div className=\"lg:w-1/2 w-full lg:pl-10 lg:py-6 mt-6 lg:mt-0\">\r\n                        <h1 className=\"text-gray-900 text-3xl title-font font-medium mb-1\">{book.name}</h1>\r\n                        <h2 className=\"text-sm title-font text-gray-500 tracking-widest\">{book.category}</h2>\r\n                        <div className=\"flex mb-4 justify-end\">\r\n                            <Stars rating={book.rating} count={book.numReviews} />\r\n                        </div>\r\n                        <p className=\"leading-relaxed\">{book.summary}</p>\r\n                        <div className=\"flex mt-6 items-center pb-5 border-b-2 border-gray-200 mb-5\" />\r\n                        <div className=\"flex\">\r\n                            <span className=\"title-font font-medium text-2xl text-gray-900\">\r\n                                <div className=\"flex justify-start items-center mt-2\">\r\n                                    <p className=\"text-sm text-green-500 font-bold bg-gray-100 rounded-full py-2 px-2 hover:text-red-500\">\r\n                                        {book.views ? book.views : '0'}\r\n                                    </p>\r\n                                    <p className=\"text-sm text-gray-400 font-bold ml-5\">Views</p>\r\n                                </div>\r\n                            </span>\r\n                            <button className=\"flex ml-auto text-white bg-red-500 border-0 py-2 px-6 focus:outline-none hover:bg-red-600 rounded\">\r\n                                <Link to={`/story/${book._id}/chapter/1`}>\r\n                                    Read\r\n                                </Link>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default BookDetails\r\n","import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport AddComment from '../../Components/Layout/AddComment';\r\n//import Loader from '../../Components/Message/Loader';\r\nimport ListChapter from '../../Components/Layout/ListChapter';\r\nimport ListComment from '../../Components/Layout/ListComment';\r\nimport BookDetails from '../../Components/Layout/BookDetails';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { listStoryDetails } from '../../Redux/Action/StoryAction';\r\nimport LoaderModel from '../../Components/Message/LoaderModel';\r\n\r\n// Memoized child components to prevent unnecessary re-renders\r\nconst MemoizedBookDetails = React.memo(BookDetails);\r\nconst MemoizedListChapter = React.memo(ListChapter);\r\nconst MemoizedAddComment = React.memo(AddComment);\r\nconst MemoizedListComment = React.memo(ListComment);\r\n\r\nconst DisplayBook = () => {\r\n  const { id } = useParams();  // Get the story ID from the route params\r\n  const dispatch = useDispatch();\r\n\r\n  // Fetch the book details when the component mounts or when 'id' changes\r\n  useEffect(() => {\r\n    if (id && (!book || book._id != id)) {\r\n      // Only dispatch if the story is not already loaded or the id has changed\r\n      dispatch(listStoryDetails(id));\r\n    }\r\n  }, [dispatch, id]);\r\n\r\n  // Redux state to fetch the story details\r\n  const readStory = useSelector((state) => state.readStory);\r\n  const { loading, error, book } = readStory;\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {error &&\r\n        <div className=\"text-red-500 text-center\">{error}</div>}\r\n\r\n      {/* Details of the Book */}\r\n\r\n      {loading ? <LoaderModel /> :\r\n        <MemoizedBookDetails book={book} />\r\n      }\r\n\r\n      <div className=\"mt-6 bg-gray-50\">\r\n        <div className=\"px-10 py-6 mx-auto\">\r\n          {/* List of Chapters */}\r\n          {!loading && <MemoizedListChapter />}\r\n\r\n          {/* All Comments Section  */}\r\n          <MemoizedListComment />\r\n\r\n          {/* Comment Section  */}\r\n          {\r\n            sessionStorage.getItem('user') && \r\n           <MemoizedAddComment type={'story'} id={id} />\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DisplayBook;\r\n"],"names":["_ref","rating","count","_jsxs","className","children","Array","map","_","index","_jsx","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","viewBox","d","LoaderModel","token","localStorage","getItem","Authconfig","headers","Authorization","concat","withCredentials","config","createStory","fdata","async","dispatch","type","CREATE_STORY_REQUEST","data","axios","post","backend","CREATE_STORY_SUCCESS","payload","err","CREATE_STORY_ERROR","listStory","LIST_STORY_REQUEST","get","LIST_STORY_SUCCESS","LIST_STORY_ERROR","listStoryDetails","storyid","READ_STORY_DETAILS_REQUEST","READ_STORY_DETAILS_SUCCESS","READ_STORY_DETAILS_ERROR","createChapter","CREATE_CHAPTER_REQUEST","CREATE_CHAPTER_SUCCESS","CREATE_CHAPTER_ERROR","listChapter","LIST_CHAPTER_REQUEST","LIST_CHAPTER_SUCCESS","LIST_CHAPTER_ERROR","readChapter","chapterid","READ_CHAPTER_REQUEST","READ_CHAPTER_SUCCESS","READ_CHAPTER_ERROR","listAdminStory","page","arguments","length","undefined","LIST_ADMIN_STORY_REQUEST","LIST_ADMIN_STORY_SUCCESS","LIST_ADMIN_STORY_ERROR","listAdminChapter","id","LIST_ADMIN_CHAPTER_REQUEST","LIST_ADMIN_CHAPTER_SUCCESS","LIST_ADMIN_CHAPTER_ERROR","updateChapter","console","log","UPDATE_CHAPTER_REQUEST","put","UPDATE_CHAPTER_SUCCESS","UPDATE_CHAPTER_ERROR","updateStory","UPDATE_STORY_REQUEST","UPDATE_STORY_SUCCESS","UPDATE_STORY_ERROR","createComment","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_ERROR","listComment","GET_COMMENT_REQUEST","GET_COMMENT_SUCCESS","GET_COMMENT_ERROR","_commentRef$current$v","_commentRef$current$v2","createComments","useSelector","state","loading","error","success","comment","comments","rate","setValue","useState","setComment","useDispatch","commentRef","useRef","onSubmit","e","preventDefault","form","current","value","submitHandler","star","name","onClick","target","handleRating","xmlns","placeholder","rows","required","maxLength","onChange","ref","ListChapter","useParams","ListChapterState","chapters","useEffect","_Fragment","chapter","Link","to","_id","src","cover","alt","title","ListComment","listComments","delLoading","setDelLoading","refresh","setRefresh","getRandomColorClass","colors","Math","floor","random","deleteMyComments","commentId","result","delete","deleteComment","updatedComments","filter","item","alert","_item$username","username","charAt","toUpperCase","user","JSON","parse","sessionStorage","disabled","book","setCover","category","Stars","numReviews","summary","views","MemoizedBookDetails","React","BookDetails","MemoizedListChapter","MemoizedAddComment","AddComment","MemoizedListComment","DisplayBook","readStory"],"sourceRoot":""}